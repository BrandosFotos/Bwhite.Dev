generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model MinecraftApplication {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  email      String
  discord    String
  reason     String
  experience String
  status     Status   @default(PENDING)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("minecraft_applications")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  password      String?
  name          String?
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  uploads       Uploads[]
}

model Uploads {
  id        Int      @id @default(autoincrement())
  userId    Int
  fileName  String
  filePath  String
  fileData  Bytes
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}
